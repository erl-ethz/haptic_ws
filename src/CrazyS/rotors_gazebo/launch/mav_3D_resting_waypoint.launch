<launch>
  <arg name="mav_name" default="haptic_drone"/>
  <arg name="world_name" default="grassland"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="debug" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="paused" value="true"/>
  <arg name="verbose" default="false"/>
  <arg name="plane" default="false"/>
  <arg name="right" default="true"/>

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
    <arg name="debug" value="$(arg debug)"/> 
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gui)"/> 
    <arg name="verbose" value="$(arg verbose)"/>
  </include>

  <group ns="$(arg mav_name)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
      <arg name="x" value="0.0"/>
      <arg name="y" value="0.0"/>
      <arg name="z" value="0.27"/>
    </include>
    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
    <node name="high_level_3D_resting_waypoint_controller" pkg="rotors_control" type="high_level_3D_resting_waypoint_controller" output="screen"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>

  <!-- Spawn the obstacles into Gazebo -->
  <group if="$(arg plane)">
    <group if="$(arg right)">  
      <group ns="/inclined_obstacle">
        <param name="obstacle_description" command="$(find xacro)/xacro --inorder $(find planar_structure)/urdf/inclined_obstacle.xacro"/>
        <node name="spawn_obstacle" pkg="gazebo_ros" type="spawn_model" args="-param obstacle_description -urdf -model obstacle" output="screen"/>
      </group>
    </group>
    <group unless="$(arg right)"> 
      <group ns="/inclined_obstacle">
        <param name="obstacle_description" command="$(find xacro)/xacro --inorder $(find planar_structure)/urdf/inclined_obstacle.xacro"/>
        <node name="spawn_obstacle" pkg="gazebo_ros" type="spawn_model" args="-param obstacle_description -Y 3.14 -urdf -model obstacle" output="screen"/>
      </group>
    </group>
  </group>
  <group unless="$(arg plane)">
    <group if="$(arg right)">  
      <group ns="/inclined_obstacle_cylinder">
        <param name="obstacle_description" command="$(find xacro)/xacro --inorder $(find planar_structure)/urdf/inclined_obstacle_cylinder.xacro"/>
        <node name="spawn_obstacle" pkg="gazebo_ros" type="spawn_model" args="-param obstacle_description -urdf -model obstacle" output="screen"/>
      </group>
    </group>
    <group unless="$(arg right)"> 
      <group ns="/inclined_obstacle_cylinder">
        <param name="obstacle_description" command="$(find xacro)/xacro --inorder $(find planar_structure)/urdf/inclined_obstacle_cylinder.xacro"/>
        <node name="spawn_obstacle" pkg="gazebo_ros" type="spawn_model" args="-param obstacle_description -Y 3.14 -urdf -model obstacle" output="screen"/>
      </group>
    </group>
  </group>
</launch>
